@page "/tamaños"
@inject NavigationManager Nav
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker
@inject DCMLocker.Client.Cliente.TLockerCliente cliente
@inject NotificationService NotificationService
@using OfficeOpenXml.Table;
@using OfficeOpenXml.LoadFunctions.Params;
@using System.Text.Json;
@using System.Text.Json.Serialization;


<h1>Tamaños de boxes</h1>
<label><strong>Configuración de los tamaños de boxes disponibles</strong></label>

@if (listaDeTamaños != null)
{
    <div class="tablacontent" style="position:relative;">

        <RadzenDataGrid AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="8"
                    AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay tamaños cargados."
                    Data="@listaDeTamaños" TItem="Tamaño" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="Tamaño" Property="Name" Title="Nombre" />
                <RadzenDataGridColumn TItem="Tamaño" Property="Alto" Title="Alto (cm)" />
                <RadzenDataGridColumn TItem="Tamaño" Property="Ancho" Title="Ancho (cm)" />
                <RadzenDataGridColumn TItem="Tamaño" Property="Profundidad" Title="Profundidad (cm)" />
                <RadzenDataGridColumn TItem="Tamaño" Title="Editar">
                    <Template Context="data">
                        <button class="btn" title="Editar" @onclick="() => gotoAddTamaño(data.Id)"><FeatherEdit Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Tamaño" Title="Eliminar">
                    <Template Context="data">
                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data)"><FeatherTrash2 Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <br />
    </div>
}
<button type="button" class="btn btn-primary btn-user btn-block" @onclick="() => gotoAddTamaño(0)">Agregar</button>
<br />

<button style="outline:none;height:100%;" class="btn btn-outline" @onclick="() => DownloadTxtTamaños()"><FeatherDownload Color="Black"></FeatherDownload></button>
<button style="outline:none;height:100%;" class="btn btn-outline" @onclick="() => gotoSubirTxtTamaños()"><FeatherUpload Color="Black"></FeatherUpload></button>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    List<Tamaño> listaDeTamaños;

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        listaDeTamaños = await cliente.GetListaDeTamaños();
    }

    public async Task alertaDelete(Tamaño tamaño)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Eliminará el tamaño {tamaño.Name}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deleteTamaño(tamaño);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task deleteTamaño(Tamaño tamaño)
    {
        await cliente.DeleteTamaño(tamaño);
        listaDeTamaños = await cliente.GetListaDeTamaños();
        StateHasChanged();
    }

    void gotoAddTamaño(int id)
    {
        Nav.NavigateTo($"/AddTamaño/{id}");
    }

    private async Task DownloadTxtTamaños()
    {
        if (listaDeTamaños.Count > 0)
        {
            string fileName = "tamaños.ans";
            string fileContent = JsonSerializer.Serialize<List<Tamaño>>(listaDeTamaños);

            await JSRuntime.InvokeVoidAsync("downloadFile", fileContent, fileName);

            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito",
                    Detail = "Se descargó el archivo de tamaños."
                });
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Error",
                    Detail = "La lista esta vacia.",
                    Duration = 4000
                });
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    public async Task gotoSubirTxtTamaños()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true
            };

        var formModal = Modal.Show<SubirTxtTamaños>("", parameters, options);
        var result = await formModal.Result;

        listaDeTamaños = await cliente.GetListaDeTamaños();
        StateHasChanged();

    }
}
