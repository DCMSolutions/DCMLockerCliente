@page "/eventos"
@using System.Globalization

<h1><strong>Eventos</strong></h1>
<br />
<div style="display: flex; justify-content: space-between;">
    <label>Lista de eventos de @mes</label>
    <div>
        <RadzenDropDown @bind-Value="mes" Data="@meses" Style="width: 150px;" />

        <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(() => refreshEventos())><FeatherRefreshCw Color="black" /></RadzenButton>
    </div>
</div>
<br />

@if (listaDeEventos != null)
{
    <div class="tablacontent" style="position:relative;">
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="100" Density="Density.Compact"
                        AllowPaging="true" AllowFiltering="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay consultas aún." @ref="grid"
                        Data="@listaDeEventos" TItem="Evento" LogicalFilterOperator="LogicalFilterOperator.And" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="Evento" Property="Fecha" Title="Fecha" Width="200px" />
                <RadzenDataGridColumn TItem="Evento" Property="Identificador" Title="Identificador" Width="150px" />
                <RadzenDataGridColumn TItem="Evento" Property="Descripcion" Title="Descripcion" />
            </Columns>

        </RadzenDataGrid>
    </div>
}


@code {
    List<Evento>? listaDeEventos;
    RadzenDataGrid<Evento> grid;
    string mes;
    List<string> meses;

    protected override async Task OnInitializedAsync()
    {
        listaDeEventos = await Cliente.GetEventos();
        mes = DateTime.Now.ToString("MMMM", new CultureInfo("es-ES"));
        meses = GenerateMonthYearOptions();
    }

    List<string> GenerateMonthYearOptions()
    {
        var options = new List<string>();
        var currentYear = DateTime.Now.Year;

        for (int month = DateTime.Now.Month; month <= 10; month++)
        {
            options.Add($"{CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)}-{currentYear}");
        }

        return options;
    }

    async void refreshEventos()
    {
        listaDeEventos = await Cliente.GetEventos();
        await grid.Reload();
        StateHasChanged();
    }
}
