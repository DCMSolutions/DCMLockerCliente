@page "/eventos"

<h1><strong>Eventos</strong></h1>
<br />
<label>Lista de eventos recibidos</label>
<br />
<hr />
<RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(() => refreshEventos())><FeatherRefreshCw Color="black" /></RadzenButton>

<br />
<br />

@if (listaDeEventos != null)
{
    <div class="tablacontent" style="position:relative;">
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="100" Density="Density.Compact"
                        AllowPaging="true" AllowFiltering="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay consultas aún." @ref="grid"
                        Data="@listaDeEventos" TItem="Evento" LogicalFilterOperator="LogicalFilterOperator.And" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="Evento" Property="Fecha" Title="Fecha" Width="200px" />
                <RadzenDataGridColumn TItem="Evento" Property="Identificador" Title="Identificador" Width="150px" />
                <RadzenDataGridColumn TItem="Evento" Property="Descripcion" Title="Descripcion" />
            </Columns>

        </RadzenDataGrid>
    </div>
}


@code {
    List<Evento>? listaDeEventos;
    RadzenDataGrid<Evento> grid;

    protected override async Task OnInitializedAsync()
    {
        listaDeEventos = await Cliente.GetEventos();
    }

    async void refreshEventos()
    {
        listaDeEventos = await Cliente.GetEventos();
        await grid.Reload();
        StateHasChanged();
    }
}
