@page "/eventos"
@using System.Globalization

<h1>Eventos</h1>

@if (mes != null)
{
    <div style="display: flex; justify-content: space-between;">
        <label><strong>Lista de eventos de @mes.Nombre</strong></label>
        <div style="align-items: center">
            <RadzenDropDown TValue="Mes" @bind-Value=mes Data="@meses" TextProperty="Nombre" ValueProperty="Nombre" Style="width: 250px;" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(() => refreshEventos())><FeatherRefreshCw Color="black" /></RadzenButton>
        </div>
    </div>
    <br />
}

@if (listaDeEventos != null)
{
    <div class="tablacontent" style="position:relative;">
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="100" Density="Density.Compact"
                        AllowPaging="true" AllowFiltering="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay consultas aún." @ref="grid"
                        Data="@listaDeEventos" TItem="Evento" LogicalFilterOperator="LogicalFilterOperator.And" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="Evento" Property="Fecha" Title="Fecha" Width="200px" />
                <RadzenDataGridColumn TItem="Evento" Property="Identificador" Title="Identificador" Width="150px" />
                <RadzenDataGridColumn TItem="Evento" Property="Descripcion" Title="Descripcion" />
            </Columns>

        </RadzenDataGrid>
    </div>
}


@code {
    List<Evento>? listaDeEventos;
    RadzenDataGrid<Evento> grid;
    Mes mes;
    List<Mes> meses;

    protected override async Task OnInitializedAsync()
    {
        listaDeEventos = await Cliente.GetEventos();
        mes = new Mes
            {
                Nombre = $"{new CultureInfo("es-ES").DateTimeFormat.GetMonthName(DateTime.Now.Month)} de {DateTime.Now.Year}",
                Numero = DateTime.Now.Month,
                Año = DateTime.Now.Year
            };
        meses = GenerateMonthYearOptions();
    }

    List<Mes> GenerateMonthYearOptions()
    {
        var options = new List<Mes>();
        int currentYear = DateTime.Now.Year;
        int currentMonth = DateTime.Now.Month;

        //arranca de octubre del 2024
        for (int year = 2024; year <= currentYear; year++)
        {
            int monthLimit = (year == currentYear) ? currentMonth : 12;

            for (int month = (year == 2024) ? 10 : 1; month <= monthLimit; month++)
            {
                options.Add(new Mes
                    {
                        Nombre = $"{new CultureInfo("es-ES").DateTimeFormat.GetMonthName(month)} del {year}",
                        Numero = month,
                        Año = year
                    });
            }
        }

        return options;
    }

    async void refreshEventos()
    {
        if (mes != null)
        {
            int mesesAtras = (DateTime.Now.Month - mes.Numero) + 12 * (DateTime.Now.Year - mes.Año);
            Console.WriteLine("meses atras " + mesesAtras);
            listaDeEventos = await Cliente.GetEventosViejos(mesesAtras);
            await grid.Reload();
            StateHasChanged();
        }
        else
        {
            listaDeEventos = await Cliente.GetEventos();
            await grid.Reload();
            StateHasChanged();
        }
    }

    public class Mes
    {
        public string Nombre { get; set; }
        public int Numero { get; set; }
        public int Año { get; set; }
    }
}
