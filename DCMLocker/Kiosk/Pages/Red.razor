@page "/Red"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker

@inject NavigationManager Navigation
@inject DCMLocker.Kiosk.Cliente.TLockerCliente Cliente
@inject NotificationService NotificationService


@if (!isActualizando)
{

    <div class="row">
        <div class="col-12" align="left">
            <button class="btn btn-outline-warning" @onclick="gotoindex">Volver</button>
        </div>
    </div>

    <h3>Configuración de red</h3>
    @if (Ips != null)
    {
        <div class="row">
            @for (int x = 0; x < Ips.Length; x++)
            {
                <div class="col-lg-6">
                    <p><strong>IP:</strong>@Ips[x].IP</p>
                    <p><strong>MASK:</strong>@Ips[x].NetMask</p>
                    <p><strong>Tipo:</strong>@Ips[x].NetworkInterfaceType</p>
                    <p><strong>Estado:</strong>@Ips[x].NetworkOperationalStatus</p>
                </div>
            }
        </div>
    }
    <button type="button" class="btn btn-info btn-user btn-block" @onclick="InfoTewer" title="Proximamente...">Info tewer</button>
    <button type="button" class="btn btn-success btn-user btn-block" @onclick="@(e => alertaGeneral("actualizará", SweetAlertIcon.Success))">Actualizar locker</button>
    <button type="button" class="btn btn-warning btn-user btn-block" @onclick="@(e => alertaGeneral("reseteará", SweetAlertIcon.Warning))">Resetear locker</button>
    <button type="button" class="btn btn-danger btn-user btn-block" @onclick="@(e => alertaGeneral("apagará", SweetAlertIcon.Error))">Apagar locker</button>

    <br/>

    <a>Versión @version del día @fecha</a>
}
else
{
    <div class="abs-center">
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
    </div>
}

@code
{
    SystemNetwork[] Ips { get; set; }

    bool isActualizando = false;

    string version;
    string fecha;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        Ips = await Cliente.System_GetIP();

        version = await Cliente.GetVersion();
        fecha = await Cliente.GetFecha();
        StateHasChanged();
    }

    protected void InfoTewer()
    {
        Console.WriteLine("Proximamente...");
    }

    protected async void SendActualizar()
    {
        isActualizando = true;
        await Cliente.System_Update();
    }

    protected async void SendResetear()
    {
        isActualizando = true;
        await Cliente.System_Reset();
    }

    protected async void SendApagar()
    {
        isActualizando = true;
        await Cliente.System_Shutdown();
    }

    public async Task alertaGeneral(string funcion, SweetAlertIcon icon)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Se {funcion} este locker",
                Icon = icon,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (funcion == "apagará") SendApagar();
            else if (funcion == "reseteará") SendResetear();
            else if (funcion == "actualizará") SendActualizar();

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    void gotoindex()
    {
        Navigation.NavigateTo("/");
    }
}
